db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}
db.sales.aggregate([
  {
    $group: {
      _id: null,
      maxQuantity: { $max: "$quantity" }
    }
  }
]);
{
  _id: null,
  maxQuantity: 30
}
db.sales2.aggregate([{$group:{_id:"$item",maxquantity:{$max:"$quantity"}}}])
db.sales.aggregate([{$group:{_id:"$item",maxquantity:{$max:"$quantity"}}}])
{
  _id: 'Americanos',
  maxquantity: 22
}
{
  _id: 'Lattes',
  maxquantity: 30
}
{
  _id: 'Cappuccino',
  maxquantity: 20
}
{
  _id: 'Mochas',
  maxquantity: 11
}
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      maxSale: { $max: { $multiply: ["$price", "$quantity"] } }
    }
  }
]);
{
  _id: 'Cappuccino',
  maxSale: 170
}
{
  _id: 'Lattes',
  maxSale: 750
}
{
  _id: 'Americanos',
  maxSale: 210
}
{
  _id: 'Mochas',
  maxSale: 275
}
db.sales.aggregate([{$group:{_id:"$item",max_qt:{$max:"$quantity"}}},{$sort:{max_qt:-1}},{$limit:2}]).skip(1);
{
  _id: 'Americanos',
  max_qt: 22
}
db.sales.aggregate([
    {
        $addFields: {
            sortedValues: { $cond: { if: { $gt: ["$price", "$quantity"] }, then: ["$price", "$quantity"], else: ["$quantity", "$price"] } }
        }
    },
    {
        $addFields: {
            secondMaxValue: { $arrayElemAt: ["$sortedValues", 1] }
        }
    },
    {
        $project: { item: 1, secondMaxValue: 1, _id: 0 }
    }
])
{
  item: 'Americanos',
  secondMaxValue: 5
}
{
  item: 'Cappuccino',
  secondMaxValue: 6
}
{
  item: 'Lattes',
  secondMaxValue: 15
}
{
  item: 'Mochas',
  secondMaxValue: 11
}
{
  item: 'Americanos',
  secondMaxValue: 10
}
{
  item: 'Cappuccino',
  secondMaxValue: 7
}
{
  item: 'Lattes',
  secondMaxValue: 25
}
{
  item: 'Americanos',
  secondMaxValue: 10
}
{
  item: 'Cappuccino',
  secondMaxValue: 10
}
{
  item: 'Americanos',
  secondMaxValue: 8
}
db.sales.aggregate([
  {
    $addFields: {
      totalSale: { $multiply: ["$price", "$quantity"] }
    }
  },
  {
    $sort: { item: 1, totalSale: -1 }
  },
  {
    $group: {
      _id: "$item",
      salesList: { $push: "$totalSale" }
    }
  },
  {
    $project: {
      secondMaxSale: { $arrayElemAt: ["$salesList", 1] }
    }
  }
]);
{
  _id: 'Cappuccino',
  secondMaxSale: 140
}
{
  _id: 'Lattes',
  secondMaxSale: 375
}
{
  _id: 'Mochas'
}
{
  _id: 'Americanos',
  secondMaxSale: 120
}
db.sales.drop()
true
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}
db.sales.createIndex({item:1})
item_1
db.sales.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { item: 1 }, name: 'item_1' }
]
db.sales.dropIndex({item:1})
{ nIndexesWas: 2, ok: 1 }
db.users.insertMany([
   { email:  "john@test.com", name: "john"},
   { email:  "jane@test.com", name: "jane"},
]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6841a13f01796936407b2e96'),
    '1': ObjectId('6841a13f01796936407b2e97')
  }
}
db.users.find()
{
  _id: ObjectId('6841a13f01796936407b2e96'),
  email: 'john@test.com',
  name: 'john'
}
{
  _id: ObjectId('6841a13f01796936407b2e97'),
  email: 'jane@test.com',
  name: 'jane'
}
db.users.createIndex({email:1},{unique:true})
email_1
db.users.createIndex({email:1},{unique:true})
email_1
db.users.drop()
true
db.users.insertMany([
   { email:  "john@test.com", name: "john"},
   { email:  "john@test.com", name: "johny"},
   { email:  "jane@test.com", name: "jane"},
]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6841a30401796936407b2e98'),
    '1': ObjectId('6841a30401796936407b2e99'),
    '2': ObjectId('6841a30401796936407b2e9a')
  }
}
db.users.createIndex({email:1},{unique:true})
MongoServerError[DuplicateKey]: Index build failed: ccc34793-1679-48d3-acd5-0f887babd817: Collection vit.users ( 416ccb7e-3fcd-4630-bf21-476a52ebb015 ) :: caused by :: E11000 duplicate key error collection: vit.users index: email_1 dup key: { email: "john@test.com" }
db.user.deleteOne({name:'johny'})
{
  acknowledged: true,
  deletedCount: 0
}
db.users.find()
{
  _id: ObjectId('6841a30401796936407b2e98'),
  email: 'john@test.com',
  name: 'john'
}
{
  _id: ObjectId('6841a30401796936407b2e99'),
  email: 'john@test.com',
  name: 'johny'
}
{
  _id: ObjectId('6841a30401796936407b2e9a'),
  email: 'jane@test.com',
  name: 'jane'
}
db.users.deleteOne({name:'johny'})
{
  acknowledged: true,
  deletedCount: 1
}
db.users.find()
{
  _id: ObjectId('6841a30401796936407b2e98'),
  email: 'john@test.com',
  name: 'john'
}
{
  _id: ObjectId('6841a30401796936407b2e9a'),
  email: 'jane@test.com',
  name: 'jane'
}
db.users.createIndex({email:1},{unique:true})
email_1
db.locations.insertOne({
  address: "Downtown San Jose, CA, USA",
  lat: 37.335480,
  long: -121.893028
})
{
  acknowledged: true,
  insertedId: ObjectId('6841a3e501796936407b2e9b')
}
db.locations.createIndex({
  lat: 1,
  long: 1
}, { unique: true });
lat_1_long_1



package connection;

import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.client.MongoDatabase;

public class MongoDB {

	public static void main(String[] args) {
		try {
            MongoClient db
                = new MongoClient("localhost", 27017);

            MongoCredential credential;
            credential
                = MongoCredential
                      .createCredential(
                          "GFGUser", "mongoDb",
                          "password".toCharArray());
            System.out.println(
                "Successfully Connected"
                + " to the database");

            MongoDatabase database
                = db.getDatabase("mongoDb");
            System.out.println("Credentials are: "
                               + credential);
        }
        catch (Exception e) {
            System.out.println(
                "Connection establishment failed");
            System.out.println(e);
        }

	}

}